--- boost_1_44_0/boost/config/platform/rtems.hpp	1970-01-01 01:00:00.000000000 +0100
+++ boost_1_44_0/boost/config/platform/rtems.hpp	2011-10-09 13:40:17.132032356 +0200
@@ -0,0 +1,47 @@
+#define BOOST_PLATFORM "rtems"
+
+// boilerplate code:
+#include <boost/config/posix_features.hpp>
+#include <cstdlib>
+
+#ifndef __GNUC__
+#  ifndef __extension__
+#     define __extension__
+#  endif
+#  ifndef __const__
+#     define __const__ const
+#  endif
+#  ifndef __volatile__
+#     define __volatile__ volatile
+#  endif
+#  ifndef __signed__
+#     define __signed__ signed
+#  endif
+#  ifndef __typeof__
+#     define __typeof__ typeof
+#  endif
+#  ifndef __inline__
+#     define __inline__ inline
+#  endif
+#endif
+
+#  ifndef BOOST_HAS_STDINT_H
+#    define BOOST_HAS_STDINT_H
+#  endif
+#  ifndef BOOST_HAS_DIRENT_H
+#    define BOOST_HAS_DIRENT_H
+#  endif
+#  ifndef BOOST_HAS_SIGACTION
+#    define BOOST_HAS_SIGACTION
+#  endif
+#  ifndef BOOST_HAS_PTHREADS
+#    define BOOST_HAS_PTHREADS
+#  endif
+#  ifndef BOOST_HAS_NANOSLEEP
+#    define BOOST_HAS_NANOSLEEP
+#  endif
+
+#  define BOOST_HAS_UNISTD_H
+#  define BOOST_HAS_THREADS
+#  undef  BOOST_DISABLE_THREADS
+#  define BOOST_DATE_TIME_NO_LOCALE
--- boost_1_44_0/boost/config/select_platform_config.hpp	2010-03-15 18:55:47.000000000 +0100
+++ boost_1_44_0/boost/config/select_platform_config.hpp	2011-10-09 13:40:43.084025362 +0200
@@ -69,6 +69,10 @@
 // Symbian: 
 #  define BOOST_PLATFORM_CONFIG "boost/config/platform/symbian.hpp" 
 
+#elif defined(__RTEMS__) 
+// RTEMS: 
+#  define BOOST_PLATFORM_CONFIG "boost/config/platform/rtems.hpp" 
+
 #else
 
 #  if defined(unix) \
--- boost_1_44_0/boost/test/impl/execution_monitor.ipp	2009-11-28 10:19:18.000000000 +0100
+++ boost_1_44_0/boost/test/impl/execution_monitor.ipp	2011-10-09 13:52:15.949067772 +0200
@@ -23,6 +23,7 @@
 
 #ifndef BOOST_TEST_EXECUTION_MONITOR_IPP_012205GER
 #define BOOST_TEST_EXECUTION_MONITOR_IPP_012205GER
+#define BOOST_SKIP_SIGNAL_TESTS
 
 // Boost.Test
 #include <boost/test/detail/config.hpp>
@@ -173,7 +174,7 @@ namespace { void _set_se_translator( voi
 #    endif 
 #  endif 
 
-#  if !defined(__CYGWIN__) && !defined(__QNXNTO__)
+#  if !defined(__CYGWIN__) && !defined(__QNXNTO__) && !defined(BOOST_SKIP_SIGNAL_TESTS)
 #   define BOOST_TEST_USE_ALT_STACK
 #  endif
 
@@ -327,6 +328,7 @@ system_signal_exception::report() const
     if( !m_sig_info )
         return; // no error actually occur?
 
+#ifndef BOOST_SKIP_SIGNAL_TESTS
     switch( m_sig_info->si_code ) {
     case SI_USER:
         report_error( execution_exception::system_error,
@@ -608,6 +610,7 @@ system_signal_exception::report() const
     default:
         report_error( execution_exception::system_error, "unrecognized signal" );
     }
+#endif
 }
 
 //____________________________________________________________________________//
@@ -667,10 +670,12 @@ signal_action::signal_action( int sig, b
                                             : &execution_monitor_jumping_signal_handler;
     BOOST_TEST_SYS_ASSERT( sigemptyset( &m_new_action.sa_mask ) != -1 );
 
+#ifndef BOOST_SKIP_SIGNAL_TESTS
 #ifdef BOOST_TEST_USE_ALT_STACK
     if( alt_stack )
         m_new_action.sa_flags |= SA_ONSTACK;
 #endif
+#endif
 
     BOOST_TEST_SYS_ASSERT( ::sigaction( m_sig, &m_new_action, &m_old_action ) != -1 );
 }
@@ -761,6 +766,7 @@ signal_handler::signal_handler( bool cat
         ::alarm( timeout );
     }
 
+#ifndef BOOST_SKIP_SIGNAL_TESTS
 #ifdef BOOST_TEST_USE_ALT_STACK
     if( alt_stack ) {
         stack_t sigstk;
@@ -776,6 +782,7 @@ signal_handler::signal_handler( bool cat
         }
     }
 #endif
+#endif
 }
 
 //____________________________________________________________________________//
@@ -787,6 +794,7 @@ signal_handler::~signal_handler()
     if( m_timeout > 0 )
         ::alarm( 0 );
 
+#ifndef BOOST_SKIP_SIGNAL_TESTS
 #ifdef BOOST_TEST_USE_ALT_STACK
 #ifdef __GNUC__
     // We shouldn't need to explicitly initialize all the members here,
@@ -802,6 +810,7 @@ signal_handler::~signal_handler()
     BOOST_TEST_SYS_ASSERT( ::sigaltstack( &sigstk, 0 ) != -1 );
 #endif
 
+#endif
     s_active_handler = m_prev_handler;
 }
 
@@ -815,6 +824,9 @@ extern "C" {
 
 static bool ignore_sigchild( siginfo_t* info )
 {
+#ifdef BOOST_SKIP_SIGNAL_TESTS
+    return info->si_signo == SIGCHLD;
+#else
     return info->si_signo == SIGCHLD
 #ifndef BOOST_TEST_LIMITED_SIGNAL_DETAILS
             && info->si_code == CLD_EXITED 
@@ -824,6 +836,7 @@ static bool ignore_sigchild( siginfo_t* 
 #else
             && (int)info->si_status == 0;
 #endif
+#endif
 }
 
 //____________________________________________________________________________//
--- boost_1_44_0/boost/thread/thread_time.hpp	2008-06-18 15:01:08.000000000 +0200
+++ boost_1_44_0/boost/thread/thread_time.hpp	2011-10-09 13:46:15.565070164 +0200
@@ -6,7 +6,9 @@
 //  accompanying file LICENSE_1_0.txt or copy at
 //  http://www.boost.org/LICENSE_1_0.txt)
 
+#if !defined(__RTEMS__)
 #include <boost/date_time/microsec_time_clock.hpp>
+#endif
 #include <boost/date_time/posix_time/posix_time_types.hpp>
 
 #include <boost/config/abi_prefix.hpp>
@@ -17,7 +19,15 @@ namespace boost
     
     inline system_time get_system_time()
     {
+#if defined(__RTEMS__)
+    #if defined(BOOST_DATE_TIME_HAS_HIGH_PRECISION_CLOCK)
+        return boost::posix_time::microsec_clock::universal_time();
+    #else
+        return boost::posix_time::second_clock::universal_time();
+    #endif
+#else
         return boost::date_time::microsec_clock<system_time>::universal_time();
+#endif
     }
 
     namespace detail
--- boost_1_44_0/boost/timer.hpp	2004-07-25 14:01:00.000000000 +0200
+++ boost_1_44_0/boost/timer.hpp	2011-10-09 13:52:36.829067554 +0200
@@ -20,6 +20,7 @@
 #include <boost/config.hpp>
 #include <ctime>
 #include <boost/limits.hpp>
+#include <unistd.h>
 
 # ifdef BOOST_NO_STDC_NAMESPACE
     namespace std { using ::clock_t; using ::clock; }
--- boost_1_44_0/libs/filesystem/v2/src/v2_operations.cpp	2010-08-10 22:00:09.000000000 +0200
+++ boost_1_44_0/libs/filesystem/v2/src/v2_operations.cpp	2011-10-09 13:49:10.760026650 +0200
@@ -1065,6 +1065,7 @@ namespace boost
       BOOST_FILESYSTEM_DECL space_pair
       space_api( const std::string & ph )
       {
+#if !defined(__RTEMS__)
         struct BOOST_STATVFS vfs;
         space_pair result;
         if ( ::BOOST_STATVFS( ph.c_str(), &vfs ) != 0 )
@@ -1083,6 +1084,12 @@ namespace boost
           result.second.available
             = static_cast<boost::uintmax_t>(vfs.f_bavail) * BOOST_STATVFS_F_FRSIZE;
         }
+#else
+        space_pair result;
+        result.first = error_code( errno, system_category() );
+        result.second.capacity = result.second.free
+          = result.second.available = 0;
+#endif
         return result;
       }
 
--- boost_1_44_0/libs/filesystem/v3/src/unique_path.cpp	2010-08-10 22:00:09.000000000 +0200
+++ boost_1_44_0/libs/filesystem/v3/src/unique_path.cpp	2011-10-09 13:49:45.537490299 +0200
@@ -28,6 +28,7 @@
 
 # ifdef BOOST_POSIX_API
 #   include <fcntl.h>
+#   include <unistd.h>
 # else // BOOST_WINDOWS_API
 #   include <windows.h>
 #   include <wincrypt.h>
--- boost_1_44_0/tools/build/v2/user-config.jam	2008-07-15 15:53:41.000000000 +0200
+++ boost_1_44_0/tools/build/v2/user-config.jam	2011-10-09 13:51:13.249417484 +0200
@@ -84,3 +84,10 @@
 
 # Configure with an explicit installation prefix.
 # using qt : /usr/opt/qt ;
+
+using gcc : rtems4.10 : ${RTEMS_INSTALL_DIR}/bin/${TARGET}-g++ :
+<compileflags>-I${RTEMS_INSTALL_DIR}/${TARGET}/${BSP}/lib/include
+<compileflags>-I${RTEMS_INSTALL_DIR}/${TARGET}/include
+<compileflags>-D__RTEMS__
+<compileflags>-fpermissive
+;
