--- rock/base/types_ruby/ext/Spline.cpp	2011-09-10 19:52:12.000000000 +0200
+++ rock/base/types_ruby/ext/Spline.cpp 2011-10-06 17:46:50.737107001 +0200
@@ -3,7 +3,8 @@
 #include "rice/Constructor.hpp"
 #include "rice/Enum.hpp"
 
-#include <base/geometry/spline.h>
+//#include <base/wrappers/geometry/spline.h>
+#include "spline.h"
 
 using namespace Rice;
 using base::geometry::SplineBase;

--- rock/base/types_ruby/ext/extconf.rb	2011-09-10 19:52:12.000000000 +0200
+++ rock/base/types_ruby/ext/extconf.rb 2011-10-06 17:46:50.737107001 +0200
@@ -14,10 +14,10 @@ if !pkg_config('eigen2')
    $CXXFLAGS += " -I/usr/include/eigen2"
 end
 
-if !pkg_config('base-lib')
-   STDERR.puts "could not find Rock's base-lib pkg-config file, assuming eigen headers is in /usr/include/eigen2"
-   exit(1)
-end
+#if !pkg_config('base-lib')
+#   STDERR.puts "could not find Rock's base-lib pkg-config file, assuming eigen headers is in /usr/include/eigen2"
+#   exit(1)
+#end
 
 create_makefile(extension_name)
 
--- rock/base/types_ruby/ext/base/eigen.h	1970-01-01 01:00:00.000000000 +0100
+++ rock/base/types_ruby/ext/base/eigen.h	2011-09-10 19:52:12.000000000 +0200
@@ -0,0 +1,30 @@
+#ifndef __BASE_EIGEN_HH__
+#define __BASE_EIGEN_HH__
+
+#include <Eigen/Core>
+#include <Eigen/Geometry> 
+
+#include <Eigen/SVD> 
+
+namespace base
+{
+    // We define these typedefs to workaround alignment requirements for normal
+    // Eigen types. This reduces the amount of knowledge people have to have to
+    // manipulate these types -- as well as the structures that use them -- and
+    // make them usable in Orocos dataflow.
+    //
+    // Eigen supports converting them to "standard" eigen types in a
+    // straightforward way. Moreover, vectorization does not help for small
+    // sizes
+    typedef Eigen::Quaterniond                         Quaterniond;
+
+    typedef Eigen::Matrix<double, 2, 1, Eigen::DontAlign>     Vector2d;
+    typedef Eigen::Matrix<double, 3, 1, Eigen::DontAlign>     Vector3d;
+
+    typedef Eigen::Matrix<double, 2, 2, Eigen::DontAlign>     Matrix2d;
+    typedef Eigen::Matrix<double, 3, 3, Eigen::DontAlign>     Matrix3d;
+    typedef Eigen::Matrix<double, 4, 4, Eigen::DontAlign>     Matrix4d;
+}
+
+#endif
+
--- rock/base/types_ruby/ext/spline.h	1970-01-01 01:00:00.000000000 +0100
+++ rock/base/types_ruby/ext/spline.h	2011-09-10 19:52:12.000000000 +0200
@@ -0,0 +1,787 @@
+#ifndef  _BASE_SPLINE_HPP_INC
+#define  _BASE_SPLINE_HPP_INC
+
+#include <vector>
+#include "base/eigen.h"
+#include <stdexcept>
+#include <algorithm>
+
+struct SISLCurve;
+
+namespace base {
+namespace geometry {
+    /** Representation and manipulation of a N-order, 3D NURBS curve
+     *
+     * The availability of this class is dependent on the availability of the
+     * SISL library
+     *
+     * http://www.sintef.no/Informasjons--og-kommunikasjonsteknologi-IKT/Anvendt-matematikk/Fagomrader/Geometri/Prosjekter/The-SISL-Nurbs-Library/SISL-Homepage/
+     */
+    class SplineBase
+    {
+    public:
+        SplineBase(SplineBase const& source);
+        ~SplineBase();
+
+        explicit SplineBase(int dimension,
+                double geometric_resolution = 0.1, int order = 3);
+        explicit SplineBase(double geometric_resolution, SISLCurve* curve);
+
+        /** Changes the default geometric resolution */
+        void setGeometricResolution(double _geores) { geometric_resolution = _geores; }
+        double getGeometricResolution() const { return geometric_resolution; };
+
+        /** Returns true if the curve is not yet initialized */
+        bool isEmpty() const
+        { return !getSISLCurve() && singleton.empty(); }
+
+        /** Returns true if the curve is a point */
+        bool isSingleton() const
+        { return !singleton.empty(); }
+
+        /** Returns the dimension of the space in which the curve lies */
+        int    getDimension() const { return dimension; }
+        /** Returns the number of points for this curve */
+        int    getPointCount() const;
+        /** Change the curve order. This is only propagated after interpolate()
+         * is called
+         */
+        void setCurveOrder(int value) { curve_order = value; }
+        /** Returns the order of the curve */
+        int    getCurveOrder() const { return curve_order; }
+        /** Returns the length of the curve in geometric space */
+        double getCurveLength();
+        /** Returns the maximum curvature of the curve */
+        double getCurvatureMax();
+        double getStartParam() const { return start_param; };
+        double getEndParam()   const { return end_param; };
+
+        /** Return a pointer to the underlying SISL structure
+         *
+         * This pointer will be non-NULL only after interpolate() has been called
+         * at least once.
+         */
+        SISLCurve const* getSISLCurve() const;
+
+        /** Return a pointer to the underlying SISL structure
+         *
+         * This pointer will be non-NULL only after interpolate() has been called
+         * at least once.
+         */
+        SISLCurve* getSISLCurve();
+
+        /** Returns the length-to-parametric scale
+         *
+         * I.e. it returns the number of parametric units that lie in one
+         * curve length unit
+         */
+        double getUnitParameter();
+      
+        /** Returns the curvature at the given position
+         *
+         * @throws out_of_range if _param is not in [start_param,
+         * end_param] and runtime_error if SISL returns an error
+         */
+        double getCurvature(double _param);
+
+        /** Returns the first order derivative of the curvature at the given
+         * position
+         *
+         * @throws out_of_range if _param is not in [start_param,
+         * end_param] and runtime_error if SISL returns an error
+         */
+        double getVariationOfCurvature(double _param);  // Variation of Curvature
+
+        std::vector<double> getCoordinates() const;
+
+        std::vector<double> getKnots() const;
+
+        int getSISLCurveType() const;
+
+        /** Display the curve properties on the given IO object */
+        void printCurveProperties(std::ostream& io);
+
+        /** Generates the curve
+         *
+         * If the \c parameters array is given, it is the desired parameter for
+         * the provided points. Otherwise, an automatic parametrization is
+         * generated.
+         */
+        void interpolate(std::vector<double> const& coordinates, std::vector<double> const& parameters = std::vector<double>());
+
+        /** Tests for intersection between two curves
+         */
+        bool testIntersection(SplineBase const& other, double resolution = 0.01) const;
+
+        /** Reinitializes the curve */
+        void clear();
+
+        std::vector<double> simplify();
+        std::vector<double> simplify(double tolerance);
+
+        SplineBase const& operator = (SplineBase const& base);
+
+        bool isNURBS() const;
+
+        void reset(std::vector<double> const& coordinates, std::vector<double> const& knots, int kind = -1);
+
+        /** Reverses the direction of the curve
+         */
+        void reverse();
+
+        /** Appends @c other at the end of @c this.
+         *
+         * \c other is translated so that other's start point is equal to \c
+         * this's end point. The resulting curve is then appended to \c this
+         *
+         * @see join
+         */
+        void append(SplineBase const& other);
+
+        /** Joins \c this and \c other
+         *
+         * Unlike \c append, if the distance between \c this's end point and \c
+         * other's start point is greater than \c tolerance, the method computes
+         * an intermediate curve that smoothly joins \c this and \c other.
+         *
+         * It retusn the parameter offset by which the parameters in \c other
+         * have been translated. I.e. if 
+         *
+         * <code>
+         * offset = curve.join(other, tol, true);
+         * </code>
+         *
+         * Then other.get(t) == curve.get(t + offset)
+         */
+        double join(SplineBase const& other, double tolerance, bool with_tangents);
+
+        /** Splits this curve in two parts, at the specified parameter
+         *
+         * \c this is the first part of the new pair. \c second_part is filled
+         * with the second part
+         */
+        void split(SplineBase& second_part, double parameter);
+
+        /** Crops this curve at the specified boundaries
+         *
+         * After this operation, +this+ will represent the part of the curve
+         * that was in between the two given parameters
+         */
+        void crop(double start_t, double end_t);
+
+        int getCoordinatesStride() const
+        {
+            if (isNURBS()) return dimension + 1;
+            else return dimension;
+        }
+
+        void setSingleton(double const* coordinates);
+
+    protected:
+        void reset(SISLCurve* curve);
+        void getPoint(double* result, double _param) const;
+        void getPointAndTangent(double* result, double _param) const;
+
+        void findPointIntersections(double const* _point,
+                std::vector<double>& _result_points,
+                std::vector< std::pair<double, double> >& _result_curves,
+                double _geores) const;
+
+        std::pair<double, bool> findOneLineIntersection(double const* _point,
+                double const* _normal, double _guess, double _geores) const;
+        void findLineIntersections(double const* _point, double const* _normal,
+                std::vector<double>& _result_points,
+                std::vector< std::pair<double, double> >& _result_curves,
+                double _geores) const;
+
+        void findSphereIntersections(double const* _center, double radius,
+                std::vector<double>& points,
+                std::vector< std::pair<double, double> >& segments, double _geores) const;
+
+        double findOneClosestPoint(double const* _pt, double _guess, double _geores) const;
+        void findClosestPoints(double const* ref_point,
+                std::vector<double>& _result_points,
+                std::vector< std::pair<double, double> >& _result_curves,
+                double _geores) const;
+
+        double localClosestPointSearch(double* ref_point,
+                double _guess, double _start, double _end,
+                double  _geores) const;
+
+        void getPointAndTangentHelper(double* result, double _param, bool with_tangent) const;
+
+        /** Helper function for findOneClosestPoint and findOneLineIntersection.
+         * It returns the parameter in points and/or curves that is the closest
+         * to the given guess
+         *
+         * The caller is in charge of making sure that at least one of \c points
+         * or \c curves is not empty
+         */
+        double getResultClosestToGuess(double _guess, std::vector<double> points,
+            std::vector< std::pair<double, double> > curves) const;
+
+        //! available only in Spline<3>
+        base::Matrix3d getFrenetFrame(double _param);
+        //! available only in Spline<3>
+        double getHeading(double _param);
+        //! available only in Spline<3>
+        double headingError(double _actHeading, double _param);
+        //! available only in Spline<3>
+        double distanceError(base::Vector3d _pt, double _param);
+        //! available only in Spline<3>
+        base::Vector3d poseError(base::Vector3d _pt, double _actZRot, double _st_para);
+
+    private:
+        std::vector<double> singleton;
+
+        int dimension;
+        //! the underlying SISL curve
+        SISLCurve *curve;
+
+        //! the geometric resolution
+        double geometric_resolution;
+        //! the order of the NURBS curve that approximates the points
+        int curve_order;
+        //! the start parameter (usually 0.0)
+        double start_param;
+        //! the end parameter, as returned by SISL
+        double end_param;
+
+        //! if we have already calculated the curve length
+        bool has_curve_length;
+        //! the cache value for the curve length in geometric space
+        double curve_length; // Length of the curve
+
+        //! if we have already calculated the maximum curvature
+        bool has_curvature_max;
+        //! maximum curvature in the curve
+        double curvature_max;
+    };
+
+    class Spline3Base : public SplineBase
+    {
+    public:
+        explicit Spline3Base(int dimension, double geometric_resolution, int order)
+            : SplineBase(dimension, geometric_resolution, order) {}
+        explicit Spline3Base(double geometric_resolution, SISLCurve* curve)
+            : SplineBase(geometric_resolution, curve) {}
+        Spline3Base(SplineBase const& source)
+            : SplineBase(source) {}
+
+        base::Matrix3d getFrenetFrame(double _param)
+        { return SplineBase::getFrenetFrame(_param); }
+
+        double getHeading(double _param)
+        { return SplineBase::getHeading(_param); }
+
+        double headingError(double _actZRot, double _param)
+        { return SplineBase::headingError(_actZRot, _param); }
+
+        double distanceError(base::Vector3d _pt, double _param)
+        { return SplineBase::distanceError(_pt, _param); }
+
+        /** Searches for the closest point in the curve, and returns the pose
+         * error between the frenet frame on the curve and the given pose given
+         * by _position and _heading.
+         *
+         * The returned vector is (distance_error, heading_error,
+         * curve_parameter)
+         */
+        base::Vector3d poseError(base::Vector3d const& _position, double _heading, double _guess)
+        { return SplineBase::poseError(_position, _heading, _guess); }
+    };
+
+    template<int DIM> struct SplineBaseClass
+    { typedef SplineBase type; };
+    template<> struct SplineBaseClass<3>
+    { typedef Spline3Base type; };
+
+    template<int DIM>
+    class Spline : public SplineBaseClass<DIM>::type
+    {
+    public:
+        typedef typename SplineBaseClass<DIM>::type base_t;
+        typedef Eigen::Matrix<double, DIM, 1, Eigen::DontAlign>     vector_t;
+        typedef Eigen::Transform<double, DIM> transform_t;
+
+        explicit Spline(double geometric_resolution = 0.1, int order = 3)
+            : base_t(DIM, geometric_resolution, order) {}
+        explicit Spline(double geometric_resolution, SISLCurve* curve)
+            : base_t(geometric_resolution, curve) {}
+        Spline(SplineBase const& base)
+            : base_t(base) {}
+
+        /** Returns the geometric start point of the curve */
+        vector_t getStartPoint() const
+        { return getPoint(this->getStartParam()); }
+
+        /** Returns the geometric end point of the curve */
+        vector_t getEndPoint() const
+        { return getPoint(this->getEndParam()); }
+
+        /** Resets this curve to a singleton */
+        void setSingleton(vector_t const& v)
+        {
+            SplineBase::setSingleton(v.data());
+        }
+
+        /** Returns the geometric point that lies on the curve at the given
+         * parameter */
+        vector_t getPoint(double _param) const
+        {
+            vector_t result;
+            SplineBase::getPoint(result.data(), _param);
+            return result;
+        }
+
+        std::vector<vector_t> getPoints(std::vector<double> const& parameters) const
+        {
+            std::vector<vector_t> result;
+            result.reserve(parameters.size());
+            for (unsigned int i = 0; i < parameters.size(); ++i)
+                result.push_back(getPoint(parameters[i]));
+            return result;
+        }
+
+        /** Private helper method for advance and length
+         *
+         * Iteratively computes a discretization of the curve from +start+ to
+         * +end+, with two points in the discretization not being further apart
+         * than _geores.
+         *
+         * It accumulates the distance while doing so. If, at some point in the
+         * search, the accumulated distance \c cur_length gets bigger than \c
+         * target, then the parameter at that point gets stored in result and
+         * the method returns true.
+         *
+         * If it never happens, the method returns false. In this case, \c
+         * result is set to \c end and \c cur_length is the approximate length
+         * of the whole segment.
+         */
+        bool doAdvance(double& result, double& cur_length, double target, double start, vector_t const& start_p, double end, vector_t const& end_p, double _geores) const
+        {
+            double d = (start_p - end_p).norm();
+            if (d < _geores)
+            {
+                cur_length += d;
+                if (cur_length > target)
+                {
+                    result = end;
+                    return true;
+                }
+                return false;
+            }
+
+            double middle = (start + end) / 2;
+            vector_t middle_p = getPoint(middle);
+
+            if (doAdvance(result, cur_length, target, start, start_p, middle, middle_p, _geores))
+                return true;
+            if (doAdvance(result, cur_length, target, middle, middle_p, end, end_p, _geores))
+                return true;
+
+            return false;
+        }
+
+        /** Find a parameter separated from another by a given curve length
+         *
+         * Specifically, this method finds the parameter t1 so that the curve
+         * length between t and t1 is in [length, length + _geores]
+         *
+         * If the end of the curve is reached first, then the parameter of the
+         * end of the curve is returned.
+         */
+        std::pair<double, double> advance(double t, double length, double _geores) const
+        {
+            double result_t = 0;
+            double result_d = 0;
+            if (!doAdvance(result_t, result_d, length, t, getPoint(t), this->getEndParam(), getPoint(this->getEndParam()), _geores))
+                return std::make_pair(this->getEndParam(), result_d);
+            return std::make_pair(result_t, result_d);
+        }
+
+        /** Computes the length of a curve segment
+         *
+         * Specifically, this method finds the length of the curve by
+         * discretizing it with a step length of _geores
+         */
+        double length(double start, double end, double _geores) const
+        {
+            double result_t = 0;
+            double result_d = 0;
+            doAdvance(result_t, result_d, std::numeric_limits<double>::infinity(), start, getPoint(start), end, getPoint(end), _geores);
+            return result_d;
+        }
+
+        /** Returns the geometric point that lies on the curve at the given
+         * parameter */
+        std::pair<vector_t, vector_t> getPointAndTangent(double _param) const
+        {
+            double result[DIM * 2];
+            SplineBase::getPointAndTangent(result, _param);
+            vector_t point(result);
+            vector_t tangent(result + DIM);
+            return std::make_pair(point, tangent);
+        }
+
+        /** Returns a discretization of this curve so that two consecutive
+         * points are separated by a curve length lower than _geores
+         */
+        std::vector<vector_t> sample(double _geores, std::vector<double>* parameters = 0, int max_recursion = 20) const
+        {
+            std::vector<vector_t> result;
+            sample(result, _geores, parameters, max_recursion);
+            return result;
+        }
+
+        /** Samples the curve so that the distance between two consecutive
+         * points is always below _geores
+         */
+        void sample(std::vector<vector_t>& result, double _geores, std::vector<double>* parameters = 0, int max_recursion = 20) const
+        {
+            double start = this->getStartParam();
+            vector_t start_p = this->getPoint(start);
+            if (parameters)
+                parameters->push_back(start);
+            result.push_back(start_p);
+
+            double end   = this->getEndParam();
+            vector_t end_p = this->getPoint(end);
+            sample(result, start, start_p, end, end_p, _geores, parameters, max_recursion);
+        }
+
+        /** Helper method for the other sample methods
+         */
+        void sample(std::vector<vector_t>& result, double start, vector_t const& start_p, double end, vector_t const& end_p, double _geores, std::vector<double>* parameters, int max_recursion = 20) const
+        {
+            if (max_recursion == 0 || (start_p - end_p).norm() < _geores)
+            {
+                if (parameters)
+                    parameters->push_back(end);
+
+                result.push_back(end_p);
+                return;
+            }
+
+            double middle = (start + end) / 2;
+            vector_t middle_p = getPoint(middle);
+            sample(result, start, start_p, middle, middle_p, _geores, parameters, max_recursion - 1);
+            sample(result, middle, middle_p, end, end_p, _geores, parameters, max_recursion - 1);
+        }
+
+        /** Compute the curve from the given set of points */
+        void interpolate(std::vector<vector_t> const& points, std::vector<double> const& parameters = std::vector<double>())
+        {
+            std::vector<double> coordinates;
+            for (size_t i = 0; i < points.size(); ++i)
+                coordinates.insert(coordinates.end(), points[i].data(), points[i].data() + DIM);
+            SplineBase::interpolate(coordinates, parameters);
+        }
+
+        /** Returns the distance between the given point and the curve
+         */
+        double distanceTo(vector_t const& _pt) const
+        {
+            double closest = findOneClosestPoint(_pt);
+            vector_t curve_p = getPoint(closest);
+            return (_pt - curve_p).norm();
+        }
+
+        template<typename Test>
+        std::pair<double, double> dichotomic_search(double start_t, double end_t, Test test, double resolution, double parameter_threshold)
+        {
+            return this->dichotomic_search(
+                    start_t, this->getPoint(start_t),
+                    end_t, this->getPoint(end_t),
+                    test, resolution, parameter_threshold);
+        }
+
+        /** Does a dichotomic search to find the first point in [start_t, end_t]
+         * for which func returns true
+         *
+         * end_t might be lower than start_t, in which case the point returned
+         * will be the last point in the curve
+         */
+        template<typename Test>
+        std::pair<double, double> dichotomic_search(double start_t, base::Vector3d const& start_p, double end_t, base::Vector3d const& end_p,
+                Test test, double resolution, double parameter_threshold)
+        {
+            std::pair<bool, double> test_result =
+                test(start_t, end_t, *this);
+            if (!test_result.first)
+                return std::make_pair(0, 0);
+
+            if (fabs(end_t - start_t) < parameter_threshold || test_result.second < resolution)
+                return std::make_pair(start_t, end_t);
+
+            double middle_t = (start_t + end_t) / 2;
+            base::Vector3d middle_p = getPoint(middle_t);
+            std::pair<double, double> result;
+
+            result = dichotomic_search(start_t, start_p, middle_t, middle_p, test, resolution, parameter_threshold);
+            if (result.first != result.second)
+                return result;
+
+            result = dichotomic_search(middle_t, middle_p, end_t, end_p, test, resolution, parameter_threshold);
+            if (result.first != result.second)
+                return result;
+
+            throw std::runtime_error("cannot find a solution, but we should have. Is the provided function stable ?");
+        }
+
+        void findSphereIntersections(vector_t const& _center, double _radius,
+                std::vector<double>& points, std::vector< std::pair<double, double> >& segments) const
+        { return findSphereIntersections(_center, _radius, points, segments, SplineBase::getGeometricResolution()); }
+
+        void findSphereIntersections(vector_t const& _center, double _radius,
+                std::vector<double>& points, std::vector< std::pair<double, double> >& segments, double _geores) const
+        { return SplineBase::findSphereIntersections(_center.data(), _radius,
+                points, segments, _geores); }
+
+        void findPointIntersections(vector_t const& _point,
+                std::vector<double>& _result_points,
+                std::vector< std::pair<double, double> >& _result_curves,
+                double _geores) const
+        { return SplineBase::findPointIntersections(_point.data(),
+                _result_points, _result_curves, _geores); }
+
+        /** \overload
+         */
+        std::pair<double, bool> findOneLineIntersection(vector_t const& _pt, vector_t const& _normal) const
+        { return findOneLineIntersection(_pt, _normal, SplineBase::getGeometricResolution()); }
+
+        /** \overload
+         *
+         * Calls findOneClosestPoint using the start parameter as the guess
+         * parameter. I.e. it will always return the point closest to the start
+         * of the curve.
+         */
+        std::pair<double, bool> findOneLineIntersection(vector_t const& _pt, vector_t const& _normal, double geometric_resolution) const
+        { return findOneLineIntersection(_pt, _normal, SplineBase::getStartParam(), geometric_resolution); }
+
+        /** Returns a single intersection point between this curve and the line
+         * or plan defined by \c _pt and \c _normal
+         *
+         * This is a convenience method that calls findLineIntersections and
+         * returns one single parameter in the values returned. The returned
+         * parameter is the closes point closest to _guess.
+         *
+         * @return a (t, true) pair, with t being the parameter of the found intersection, if there is one. If
+         * there is none, the (0, false) pair is returned
+         */
+        std::pair<double, bool> findOneLineIntersection(vector_t const& _pt, vector_t const& _normal, double _guess, double _geometric_resolution) const
+        { return SplineBase::findOneLineIntersection(_pt.data(), _normal.data(), _guess, _geometric_resolution); }
+
+        /** \overload
+         */
+        std::pair<double, bool> findOneLineIntersection(vector_t const& _pt, vector_t const& _normal, vector_t const& _guess, double _geometric_resolution) const
+        {
+            std::vector<double> points;
+            std::vector< std::pair<double, double> > curves;
+            findLineIntersections(_pt, _normal, points, curves, _geometric_resolution);
+
+            if (points.empty() && curves.empty())
+                return std::make_pair(0, false);
+
+            for (unsigned int i = 0; i < curves.size(); ++i)
+            {
+                points.push_back(curves[i].first);
+                points.push_back(curves[i].second);
+            }
+
+            double result_t = points[0];
+            vector_t result_p = getPoint(result_t);
+            double min_d = (result_p - _guess).norm();
+            for (unsigned int i = 1; i < points.size(); ++i)
+            {
+                vector_t p = getPoint(points[i]);
+                double   d = (p - _guess).norm();
+                if (d < min_d)
+                {
+                    result_t = points[i];
+                    result_p = p;
+                    min_d    = d;
+                }
+            }
+            return std::make_pair(result_t, true);
+        }
+
+        void findLineIntersections(vector_t const& _point, vector_t const& _normal,
+                std::vector<double>& _result_points,
+                std::vector< std::pair<double, double> >& _result_curves,
+                double _geores) const
+        {
+            return SplineBase::findLineIntersections(_point.data(), _normal.data(),
+                    _result_points, _result_curves, _geores);
+        }
+
+
+        void findSegmentIntersections(vector_t const& _p0, vector_t const& _p1,
+                std::vector<double>& _result_points,
+                std::vector< std::pair<double, double> >& _result_curves,
+                double _geores) const
+        {
+            std::vector<double> points;
+            std::vector< std::pair<double, double> > curves;
+
+            vector_t p0p1 = (_p1 - _p0);
+            double p0p1_length = p0p1.norm();
+            p0p1.normalize();
+
+            vector_t normal;
+            if (p0p1.x() < p0p1.y() && p0p1.x() < p0p1.z())
+                normal = p0p1.cross(Eigen::Vector3d::UnitX());
+            else if (p0p1.y() < p0p1.x() && p0p1.y() < p0p1.z())
+                normal = p0p1.cross(Eigen::Vector3d::UnitY());
+            else if (p0p1.z() < p0p1.x() && p0p1.z() < p0p1.y())
+                normal = p0p1.cross(Eigen::Vector3d::UnitY());
+            findLineIntersections(_p0, normal, points, curves, _geores);
+
+            for (unsigned int i = 0; i < points.size(); ++i)
+            {
+                vector_t p = getPoint(points[i]);
+                double p_t = (p - _p0).dot(p0p1);
+                if (p_t >=0 && p_t <= p0p1_length && fabs((p - _p0).dot(normal)) < _geores)
+                    _result_points.push_back(points[i]);
+            }
+
+            for (unsigned int curve_idx = 0; curve_idx < curves.size(); ++curve_idx)
+            {
+                double curve_t[2] =
+                    { curves[curve_idx].first,  curves[curve_idx].second };
+                vector_t p[2];
+                double segment_t[2];
+                for (int i = 0; i < 2; ++i)
+                {
+                    p[i] = getPoint(curve_t[i]);
+                    segment_t[i] = (p[i] - _p0).dot(p0p1);
+                }
+
+                double* min_t = std::min_element(segment_t, segment_t + 2);
+                double* max_t = std::max_element(segment_t, segment_t + 2);
+                if (*min_t <= p0p1_length && *max_t >= 0)
+                {
+                    std::pair<double, double> segment;
+                    if (*min_t < 0)
+                        segment.first = findOneClosestPoint(_p0);
+                    else
+                        segment.first = curve_t[min_t - segment_t];
+
+                    if (*max_t > p0p1_length)
+                        segment.second = findOneClosestPoint(_p1);
+                    else
+                        segment.second = curve_t[max_t - segment_t];
+
+                    if (segment.first > segment.second)
+                        std::swap(segment.first, segment.second);
+                    _result_curves.push_back(segment);
+                }
+            }
+        }
+
+        /** Returns true if this curve intersects the given segment */
+        bool isIntersectingSegment(vector_t const& _p0, vector_t const& _p1, double _geores)
+        {
+            std::vector<double> points;
+            std::vector< std::pair<double, double> > curves;
+            findSegmentIntersections(_p0, _p1, points, curves, _geores);
+            return !points.empty() || !curves.empty();
+        }
+
+        /** \overload
+         */
+        double findOneClosestPoint(vector_t const& _pt) const
+        { return findOneClosestPoint(_pt, SplineBase::getGeometricResolution()); }
+
+        /** \overload
+         *
+         * Calls findOneClosestPoint using the start parameter as the guess
+         * parameter. I.e. it will always return the point closest to the start
+         * of the curve.
+         */
+        double findOneClosestPoint(vector_t const& _pt, double _geometric_resolution) const
+        { return findOneClosestPoint(_pt, SplineBase::getStartParam(), _geometric_resolution); }
+
+        /** Returns a single closest point to _pt
+         *
+         * This is a convenience method that calls findClosestPoints and returns
+         * one single parameter in the values returned. The returned parameter
+         * is the closes point closest to _guess.
+         *
+         * @return the parameter of the found closes point
+         * @throw std::logic_error if no points have been found (should not happen)
+         * @see localClosestPointSearch findClosestPoints
+         */
+        double findOneClosestPoint(vector_t const& _pt, double _guess, double _geometric_resolution) const
+        { return SplineBase::findOneClosestPoint(_pt.data(), _guess, _geometric_resolution); }
+
+        /** \overload
+         */
+        void findClosestPoints(vector_t const& _pt,
+                std::vector<double>& _points,
+                std::vector< std::pair<double, double> >& _curves) const
+        { return findClosestPoints(_pt, _points, _curves, SplineBase::getGeometricResolution()); }
+
+        /**
+         * Returns the single points and curve segments that are closest to
+         * the given point.
+         *
+         */
+        void findClosestPoints(vector_t const& _pt,
+                std::vector<double>& _points,
+                std::vector< std::pair<double, double> >& _curves,
+                double _geores) const
+        { return SplineBase::findClosestPoints(_pt.data(), _points, _curves, _geores); }
+
+        /** \overload
+         */
+        double localClosestPointSearch(vector_t const& _pt, double _guess, double _start, double _end)
+        { return localClosestPointSearch(_pt, _guess, _start, _end, SplineBase::getGeometricResolution()); }
+
+        /** Performs a Newton search in the provided parametric interval, starting with the given guess. The order between _start and _end can be arbitrary.
+         *
+         * This method is subject to local minima problems
+         */
+        double localClosestPointSearch(vector_t const& _pt, double _guess, double _start, double _end, double _geores)
+        { return SplineBase::localClosestPointSearch(_pt.data(), _guess, _start, _end, _geores); }
+
+        template<typename Transform>
+        void transform(Transform const& t)
+        {
+            if (SplineBase::isEmpty())
+                return;
+            else if (SplineBase::isSingleton())
+            {
+                vector_t v = getPoint(0);
+                v = t * v;
+                std::vector<double> coordinates(v.data(), v.data() + DIM);
+                SplineBase::reset(coordinates, std::vector<double>());
+            }
+            else
+            {
+                std::vector<double> const& current_coordinates = SplineBase::getCoordinates();
+                std::vector<double> coordinates(current_coordinates.begin(), current_coordinates.end());
+                int stride = SplineBase::getCoordinatesStride();
+
+                vector_t v;
+                for (unsigned int i = 0; i < current_coordinates.size(); i += stride)
+                {
+                    memcpy(v.data(), &coordinates[i], sizeof(double) * DIM);
+                    v = t * v;
+                    memcpy(&coordinates[i], v.data(), sizeof(double) * DIM);
+                }
+                SplineBase::reset(coordinates, SplineBase::getKnots());
+            }
+        }
+    };
+
+    // This is for GCCXML parsing
+    struct __gccxml_workaround_spline {
+        base::geometry::Spline<1> instanciation1;
+        base::geometry::Spline<3> instanciation3;
+    };
+    typedef base::geometry::Spline<1> Spline1;
+    typedef base::geometry::Spline<3> Spline3;
+} // geometry
+} // base
+#endif
