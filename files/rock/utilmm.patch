--- rock/tools/utilmm/CMakeLists.txt	2011-09-10 19:52:15.000000000 +0200
+++ rock/tools/utilmm/CMakeLists.txt	2011-10-06 19:38:33.733107001 +0200
@@ -1,12 +1,17 @@
 cmake_minimum_required(VERSION 2.4)
+set (CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake")
+
+if($ENV{OROCOS_TARGET} STREQUAL "rtems")
+ MESSAGE(STATUS "Setting RTEMS enviroment")
+ set(CMAKE_TOOLCHAIN_FILE  ./cmake/rtems_toolchain.cmake)
+endif($ENV{OROCOS_TARGET} STREQUAL "rtems")
 
 project(Util--)
 SET(PROJECT_VERSION 1.1)
 SET(API_VERSION 1)
 
-set (CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake")
 FIND_PACKAGE(Boost COMPONENTS unit_test_framework)
-FIND_PACKAGE(Boost REQUIRED graph filesystem thread regex)
+FIND_PACKAGE(Boost REQUIRED graph filesystem system thread regex)
 
 include_directories(${CMAKE_BINARY_DIR}) # to get cmake-generated utilmm/config/config.h
 include_directories(${CMAKE_CURRENT_SOURCE_DIR})
--- rock/tools/utilmm/debian/libutilmm1-dev.install	2011-09-10 19:52:15.000000000 +0200
+++ rock/tools/utilmm/debian/libutilmm1-dev.install	2011-10-06 18:09:23.149107000 +0200
@@ -1,2 +1,2 @@
-usr/lib/libutilmm.so
+usr/lib/libutilmm.*
 usr/include/utilmm
--- rock/tools/utilmm/debian/libutilmm1.install	2011-09-10 19:52:15.000000000 +0200
+++ rock/tools/utilmm/debian/libutilmm1.install	2011-10-06 18:09:23.149107000 +0200
@@ -1,2 +1,2 @@
-usr/lib/libutilmm.so.*
+usr/lib/libutilmm.*.*
 usr/lib/pkgconfig/utilmm.pc
--- rock/tools/utilmm/src/CMakeLists.txt	2011-09-10 19:52:15.000000000 +0200
+++ rock/tools/utilmm/src/CMakeLists.txt	2011-10-06 21:52:26.333107002 +0200
@@ -1,3 +1,4 @@
+if (NOT NOT_BUILD_SHARED)
 add_library(utilmm SHARED
     configfile/commandline.cc
     configfile/configfile.cc
@@ -12,16 +13,33 @@ add_library(utilmm SHARED
     system/process.cc
     system/socket.cc
     system/system.cc)
+   target_link_libraries(utilmm ${Boost_REGEX_LIBRARY})
+   target_link_libraries(utilmm ${Boost_THREAD_LIBRARY})
+   target_link_libraries(utilmm ${Boost_SYSTEM_LIBRARY})
+   target_link_libraries(utilmm ${Boost_FILESYSTEM_LIBRARY})
+endif(NOT NOT_BUILD_SHARED)
+
+if (BUILD_STATIC)
+add_library(utilmm STATIC 
+    configfile/commandline.cc
+    configfile/configfile.cc
+    configfile/configset.cc
+    configfile/pkgconfig.cc
+    configfile/shell_expand.cc
+    configsearch/configuration_finder.cc
+    demangle/demangle.cc
+    memory/dynamic_pool.cc
+    singleton/dummy.cc
+    singleton/server.cc
+    system/process.cc
+    system/socket.cc
+    system/system.cc)
+endif (BUILD_STATIC)
 
 set_target_properties(utilmm PROPERTIES
     VERSION ${PROJECT_VERSION}
     SOVERSION ${API_VERSION}
     INSTALL_NAME_DIR ${CMAKE_INSTALL_PREFIX}/lib)
-
-target_link_libraries(utilmm ${Boost_REGEX_LIBRARY})
-target_link_libraries(utilmm ${Boost_THREAD_LIBRARY})
-target_link_libraries(utilmm ${Boost_FILESYSTEM_LIBRARY})
-
 install(TARGETS utilmm
     RUNTIME DESTINATION bin
     LIBRARY DESTINATION lib
--- rock/tools/utilmm/src/configfile/pkgconfig.cc	2011-09-10 19:52:15.000000000 +0200
+++ rock/tools/utilmm/src/configfile/pkgconfig.cc	2011-10-06 18:09:23.149107000 +0200
@@ -3,6 +3,7 @@
 #include <utilmm/configfile/pkgconfig.hh>
 #include <utilmm/configfile/exceptions.hh>
 #include <utilmm/stringtools.hh>
+#include <unistd.h>
 
 using namespace utilmm;
 using std::string;
--- rock/tools/utilmm/src/system/socket.cc	2011-09-10 19:52:15.000000000 +0200
+++ rock/tools/utilmm/src/system/socket.cc	2011-10-06 18:09:23.149107000 +0200
@@ -10,17 +10,24 @@
 #include <netdb.h>
 #include <sys/un.h> 
 #include <netinet/in.h> 
+#include <netinet/in_systm.h> 
+#include <utility> 
+#include <unistd.h> 
 #include <netinet/ip.h> 
 #include <sys/time.h>
 #include <sys/select.h>
-
+#include <stdint.h> 
 #include <iostream>
+#include <vector>
 
 using namespace std;
 using namespace boost;
-
 namespace utilmm
 {
+   // TODO
+   typedef unsigned int uint16_t;
+   typedef unsigned char uint8_t;
+
     int base_socket::to_unix(Domain d)
     {
 	switch(d)
@@ -59,9 +66,9 @@ namespace utilmm
 	    close(m_fd);
     }
 
-    vector<uint8_t> base_socket::to_sockaddr(std::string const& to) const
+    std::vector<uint8_t> base_socket::to_sockaddr(std::string const& to) const
     {
-	vector<uint8_t> ret;
+	std::vector<uint8_t> ret;
 	if (m_domain == Unix)
 	{
 	    static const unsigned int UNIX_MAX_PATH = 108;
@@ -105,6 +112,8 @@ namespace utilmm
 		    reinterpret_cast<uint8_t*>(&addr) + sizeof(addr), 
 		    back_inserter(ret));
 	    }
+      //RTEMS does not provide IPV6
+      /*
 	    else
 	    {
 		sockaddr_in6 addr;
@@ -116,7 +125,7 @@ namespace utilmm
 		    reinterpret_cast<uint8_t*>(&addr), 
 		    reinterpret_cast<uint8_t*>(&addr) + sizeof(addr), 
 		    back_inserter(ret));
-	    }
+	    }*/
 	}
 	return ret;
     }
@@ -169,7 +178,7 @@ namespace utilmm
 
     void socket::connect(std::string const& to)
     {
-	vector<uint8_t> addr = to_sockaddr(to);
+	std::vector<uint8_t> addr = to_sockaddr(to);
 	if (::connect(fd(), reinterpret_cast<sockaddr*>(&addr[0]), addr.size()) == -1)
 	    throw unix_error("cannot connect to " + to);
     }
@@ -202,7 +211,7 @@ namespace utilmm
 
     void server_socket::bind(std::string const& to)
     {
-	vector<uint8_t> addr = to_sockaddr(to);
+	std::vector<unsigned char> addr = to_sockaddr(to);
 	if (::bind(fd(), reinterpret_cast<sockaddr*>(&addr[0]), addr.size()) == -1)
 	    throw unix_error("cannot bind to " + to);
     }
--- rock/tools/utilmm/utilmm/system/process.hh	2011-09-10 19:52:15.000000000 +0200
+++ rock/tools/utilmm/utilmm/system/process.hh	2011-10-06 18:09:23.149107000 +0200
@@ -9,6 +9,8 @@
 #include <map>
 #include <list>
 #include <signal.h>
+#include <stdio.h>
+
 
 namespace utilmm
 {
--- rock/tools/utilmm/utilmm/system/socket.hh	2011-09-10 19:52:15.000000000 +0200
+++ rock/tools/utilmm/utilmm/system/socket.hh	2011-10-06 18:09:23.149107000 +0200
@@ -5,6 +5,7 @@
 #include <string>
 #include <vector>
 #include <sys/types.h>
+#include <sys/time.h>
 #include <stdint.h>
 
 namespace utilmm
@@ -33,7 +34,7 @@ namespace utilmm
 	int wait(int what, timeval* tv) const;
 
     protected:
-	std::vector<uint8_t> to_sockaddr(std::string const& to) const;
+	 std::vector<uint8_t> to_sockaddr(std::string const& to) const;
 
     public:
 	base_socket(int fd);
--- rock/tools/utilmm/utilmm/system/system.hh	2011-09-10 19:52:15.000000000 +0200
+++ rock/tools/utilmm/utilmm/system/system.hh	2011-10-06 18:09:23.149107000 +0200
@@ -4,6 +4,8 @@
 #include <boost/noncopyable.hpp>
 #include <boost/filesystem/path.hpp>
 
+#include <stdio.h>
+
 namespace utilmm
 {
     /** Exception raised when a standard C call returns an error. It is based
--- rock/tools/utilmm/cmake/rtems_toolchain.cmake	1970-01-01 01:00:00.000000000 +0100
+++ rock/tools/utilmm/cmake/rtems_toolchain.cmake	2011-10-10 18:17:15.867913002 +0200
@@ -0,0 +1,74 @@
+INCLUDE(CMakeForceCompiler)
+
+SET(INSTALL_PREFIX $ENV{INSTALL_PREFIX})
+SET(TARGET $ENV{TARGET})
+SET(BSP $ENV{BSP})
+
+SET(CMAKE_SYSTEM_NAME RTEMS)
+
+CMAKE_FORCE_C_COMPILER($ENV{TARGET}-gcc GNU)
+CMAKE_FORCE_CXX_COMPILER($ENV{TARGET}-g++ GNU)
+
+SET(__BSD_VISIBLE 1)
+
+add_definitions("-B${INSTALL_PREFIX}/rtems/${TARGET}/${BSP}/lib/ -specs bsp_specs -qrtems  -D__RTEMS__ -DBoost_USE_STATIC_LIBS -D__BSD_VISIBLE -DBOOST_SYSTEM_NO_DEPRECATED   -DBOOST_DISABLE_THREADS  -DRUBY_EXTENSIONS_AVAILABLE=NO")
+
+add_definitions ("-fpermissive -fexceptions")
+
+IF ("${TARGET}" MATCHES "i?86-*")
+       add_definitions ("-D__i386__ -Wl,-Ttext,0x00100000")
+ELSEIF ("${TARGET}" MATCHES "sparc-*")
+        add_definitions ("-D__SPARC__")
+ENDIF()
+
+SET(CMAKE_CROSSCOMPILING ON)
+
+SET(EIGEN2_INCLUDE_DIR $ENV{INSTALL_PREFIX}/eigen/include)
+
+SET(BOOST_ROOT $ENV{INSTALL_PREFIX}/boost/)
+SET(BOOST_INCLUDEDIR $ENV{INSTALL_PREFIX}boost/include)
+SET(BOOST_LIBRARYDIR $ENV{INSTALL_PREFIX}boost/lib)
+
+SET(Boost_USE_STATIC_LIBS ON)
+SET(Boost_ADDITIONAL_VERSIONS "1.44.0" "1.44")
+SET(Boost_COMPILER -rtems4.10)
+
+SET(OMNIORB_INCLUDEDIR  $ENV{INSTALL_PREFIX}/omniORB/include)
+
+include_directories(${BOOST_INCLUDEDIR} ${OMNIORB_INCLUDEDIR} ${EIGEN2_INCLUDE_DIR})
+
+SET(DCMAKE_SYSTEM_NAME RTEMS)
+
+SET(CMAKE_SHARED_LIBRARY_C_FLAGS "")              # -pic 
+SET(CMAKE_SHARED_LIBRARY_CREATE_C_FLAGS "")       # -shared
+SET(CMAKE_SHARED_LIBRARY_LINK_C_FLAGS "")         # +s, flag for exe link to use shared lib
+SET(CMAKE_SHARED_LIBRARY_RUNTIME_C_FLAG "")       # -rpath
+SET(CMAKE_SHARED_LIBRARY_RUNTIME_C_FLAG_SEP "")   # : or empty
+
+SET(CMAKE_LINK_LIBRARY_SUFFIX "")
+SET(CMAKE_STATIC_LIBRARY_PREFIX "lib")
+SET(CMAKE_STATIC_LIBRARY_SUFFIX ".a")
+SET(CMAKE_SHARED_LIBRARY_PREFIX "lib")          # lib
+SET(CMAKE_SHARED_LIBRARY_SUFFIX ".a")           # .a
+SET(CMAKE_EXECUTABLE_SUFFIX ".bin")             #
+SET(CMAKE_DL_LIBS "" )
+
+SET(CMAKE_FIND_LIBRARY_PREFIXES "lib")
+SET(CMAKE_FIND_LIBRARY_SUFFIXES ".a")
+
+# RTEMS doesn't support shared libs
+SET_PROPERTY(GLOBAL PROPERTY TARGET_SUPPORTS_SHARED_LIBS FALSE)
+SET(CMAKE_CXX_LINK_SHARED_LIBRARY )
+SET(CMAKE_CXX_LINK_MODULE_LIBRARY )
+SET(CMAKE_C_LINK_SHARED_LIBRARY )
+SET(CMAKE_C_LINK_MODULE_LIBRARY )
+
+# set flags 
+message("-- Setting static RTEMS")
+SET(BUILD_STATIC ON)
+
+message("-- Not building shared")
+SET(NOT_BUILD_SHARED ON)
+
+#Include rtems directories and libraries
+include_directories (${INSTALL_PREFIX}/rtems/${TARGET}/${BSP}/lib/include ${INSTALL_PREFIX}/rtems/${TARGET}/include ${INSTALL_PREFIX}${TARGET}/${BSP}/lib/include/networking)
